R: Gendarme.Rules.Portability.MonoCompatibilityReviewRule
# Gendarme detects that Type.Equals is not implemented in Mono but this doesn't seem to be the case
M: System.Boolean Yarhl.FileFormat.Format/<Convert>c__AnonStorey0::<>m__1(System.Type)
M: System.Boolean Yarhl.FileFormat.Format::<ConvertWith>m__0(System.Type)
M: System.Boolean Yarhl.FileFormat.Format/<ConvertWith>c__AnonStorey0::<>m__0(System.Type)
M: System.Boolean Yarhl.FileFormat.Format/<ConvertWith>c__AnonStorey1::<>m__0(System.Type)
M: System.Boolean Yarhl.FileFormat.Format/<>c__DisplayClass13_0::<ConvertWith>b__1(System.Type)
M: System.Boolean Yarhl.FileFormat.Format/<>c::<ConvertWith>b__13_0(System.Type)
M: System.Boolean Yarhl.PluginManager/TypeParamComparer::Equals(System.Type,System.Type)
M: System.Object Yarhl.IO.DataReader::ReadByType(System.Type)
M: System.Void Yarhl.IO.DataWriter::Write(System.Type,System.Object)
M: System.Void Yarhl.IO.DataWriter::Write(System.String,System.Type,System.Boolean,System.Text.Encoding,System.Int32)

R: Gendarme.Rules.Design.Generic.AvoidMethodWithUnusedGenericTypeRule
# We want to convert by specifying the type in a generic
M: Yarhl.FileSystem.Node Yarhl.FileSystem.Node::Transform()
M: TDst Yarhl.FileFormat.Format::ConvertWith(TSrc)
M: TDst Yarhl.FileFormat.Format::ConvertWith()
M: System.Collections.Generic.IEnumerable`1<System.Type> Yarhl.PluginManager::FindExtensions()
M: System.Collections.Generic.IEnumerable`1<System.Type> Yarhl.PluginManager::FindExtensions()
M: System.Object Yarhl.IO.DataReader::Read()

R: Gendarme.Rules.Design.ListsAreStronglyTypedRule
# It looks like a bug in Gendarme
# It makes no sense for a ReadOnlyCollection that furthermore is strongly type because of the generic
T: Yarhl.FileSystem.NavegableNodeCollection`1

R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
# It's a factory, we are creating the objects
M: Yarhl.FileSystem.Node Yarhl.FileSystem.NodeFactory::FromFile(System.String,System.String)
M: Yarhl.FileSystem.Node Yarhl.FileSystem.NodeFactory::FromDirectory(System.String,System.String,System.String,System.Boolean)
# In the DataStream we are sure we will dispose the streams created in the ctor.
M: System.Void Yarhl.IO.DataStream::.ctor()
M: System.Void Yarhl.IO.DataStream::.ctor(System.String,Yarhl.IO.FileOpenMode)

R: Gendarme.Rules.Correctness.DisposableFieldsShouldBeDisposedRule
# Bug in Gendarme because I am using the ? operator
T: Yarhl.FileSystem.Node

R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# In this case it is not possible since one of the methods creates a derived type.
M: System.Void Yarhl.FileSystem.NodeFactory::CreateContainersForChild(Yarhl.FileSystem.Node,System.String,Yarhl.FileSystem.Node)

R: Gendarme.Rules.Concurrency.ReviewLockUsedOnlyForOperationsOnVariablesRule
# We want to lock between methods including the initialization. It is called a few times and it's not easy to fix.
M: System.Void Yarhl.PluginManager::Shutdown()

R: Gendarme.Rules.Naming.UseCorrectSuffixRule
# It doesn't inherit but internally use a Stream.
T: Yarhl.IO.DataStream

R: Gendarme.Rules.Performance.AvoidUnneededUnboxingRule
# Actually we are unboxing once
M: System.Void Yarhl.IO.DataWriter::Write(System.Object,System.Type)

R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
# We are implementing a general streams
T: Yarhl.IO.DataStream
T: Yarhl.IO.DataWriter
T: Yarhl.IO.TextReader

R: Gendarme.Rules.Maintainability.VariableNamesShouldNotMatchFieldNamesRule
# I allow this to happen only for constructors
T: Yarhl.IO.DataStream

R: Gendarme.Rules.Globalization.PreferIFormatProviderOverrideRule
# It looks like a bug in Gendarme, we are adding a char to a string
M: System.String Yarhl.IO.TextReader::ReadToToken(System.String)
# It seems a bug in Gendarme with new $ string formatting
M: System.Object Yarhl.FileFormat.Format::ConvertTo(System.Type,System.Object)
